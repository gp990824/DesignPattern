jvm第一阶段:
	类加载器(类加载子系统)
		加载(loading)
			通过一个类的全类名获取此类的二进制字节流
			将这个字节流所代表的静态存储结构转化成方法区的运行时数据结构
			!! 在内存中生成一个java.lang.Class对象 !! ,作为方法区这个类的各种数据的访问入口(jdk 7及以前 方法区成为永久代,之后成为元空间)
		链接(linking)
			验证(verification)
			    检查该字节码文件的字节流包含的信息是否符合该jvm的标准,保证被加载的类的正确性,不会对jvm有安全隐患
			    比如 class文件的字节流头  CA FE BA BE
			准备(prepare)
			    为类变量分配内存赋初值,基本数据类型都有默认值,引用类型都是null值
			    被static final修饰的属性在被javac编译的时候就被分配好了内存
			    这个阶段不会为实例变量分配初始化,类变量会被分配在方法区中,实例变量会随对象一起分配到堆中
			解析(resolution)
			    将常量池内的符号引用转换成直接引用的过程
			    实际上,该操作往往在jvm完成初始化之后再来执行的
			    创建虚方法表也在改阶段完成
			    方法重写的本质?(虚方法如何被确定版本的?)
			        在操作数栈找到第一个元素与执行时的对象对应的实际类型C
			        然后再对象C中找到与虚方法匹配的方法,然后验证其修饰符(不是private修饰),如果正常则成功返回
			        否则,抛出IllegalAccessError异常
			        如果没有找到,则向该对象C的父类查找与该虚方法匹配的方法,如果还没有继续向上找,
			        如果一致没有找到,则抛出AbstractMethodError异常
			        这种虚方法的调用太麻烦了, 为了加快虚方法的调用, 创建虚方法表来解决该问题
		初始化(initialization)
		    类的构造器方法<clinit>(),此方法不需要定义,在加载类的时候,首先执行该方法
		        首先加载类中被static修饰的代码片段(属性或者代码块),执行顺序由代码在源文件出现的位置决定
		        该方法只会执行一次,在多线程的情况下是线程安全的
		    类的构造方法<init>()
		分类:
		    bootstrapClassLoader <- extClassLoader <- appClassLoader
		    引导类加载器无法通过扩展类加载器 extClassLoader.getParent()获取

		    引导类加载器,也叫启动类加载器(由C,C++语言编写,无法获取,嵌套在jvm中)
		        java的核心类库(rt.jar,resource.jar)都是引导类加载器加载的
		        只加载java,javax,sun开头的类
		    自定义类加载器
		        将所有继承抽象类ClassLoader的类加载器都划分成自定义类加载器
                扩展类加载器(ExtClassLoader,父类加载器:BootStrapClassLoader)
                    如果用户创建的jar放在jre/lib/ext子目录下,也会自动由扩展类加载器加载

                应用程序类加载器(系统类加载器 AppClassLoader 该类加载器是默认的类加载器)
                    父类加载器是扩展类加载器,负责加载java.class.path指定路径下的类库
                    一般来说,java应用的类都是由它来完成加载的
                    通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器

            为什么要自定义类加载器:
                隔离加载类
                修改类加载方式
                扩展加载源
                防止源码泄露
